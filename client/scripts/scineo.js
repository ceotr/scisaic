// Generated by CoffeeScript 2.0.3
(function() {
  $(window).on("load", function() {
    var MouseWheelHandler, canvas, container, context, max_zoom, stage, starting_tile, starting_zoom, tileManager, tile_size, tms_url;
    tms_url = "tiles/{z}/{x}/{y}.png";
    starting_zoom = 0;
    max_zoom = 4;
    tile_size = 720;
    canvas = $('#plot');
    stage = new createjs.Stage(canvas[0]);
    starting_tile = tms_url.replace('{z}', starting_zoom).replace('{x}', '0').replace('{y}', '0');
    // container = new createjs.Container()
    container = null;
    // tile = new createjs.Bitmap(starting_tile)
    // container.addChild(tile)
    // stage.addChild(container)
    context = stage.canvas.getContext("2d");
    context.imageSmoothingEnabled = false;
    tileManager = {
      stage: stage,
      currentContainer: container,
      previousContainer: null,
      zoomLevel: starting_zoom,
      maxZoom: max_zoom,
      tmsUrl: tms_url,
      tileSize: tile_size,
      addLayer: function(level = this.zoomLevel) {
        var bounds, i, j, ref, ref1, tile, tileShape, url, x, y;
        this.previousContainer = this.currentContainer;
        this.currentContainer = new createjs.Container();
        container = this.currentContainer;
        stage.addChild(this.currentContainer);
        console.log(container);
        bounds = stage.getBounds();
        tileShape = {
          x: 0,
          y: 0
        };
        for (x = i = 0, ref = Math.pow(2, level - 1); 0 <= ref ? i <= ref : i >= ref; x = 0 <= ref ? ++i : --i) {
          for (y = j = 0, ref1 = Math.pow(2, level - 1); 0 <= ref1 ? j <= ref1 : j >= ref1; y = 0 <= ref1 ? ++j : --j) {
            console.log(x, y);
            url = this.tmsUrl.replace('{z}', level).replace('{x}', x).replace('{y}', y);
            tile = new createjs.Bitmap(url);
            tile.set({
              x: x * this.tileSize,
              y: y * this.tileSize
            });
            this.currentContainer.addChild(tile);
            tile.image.onload = function() {
              return stage.update();
            };
          }
        }
        if (this.previousContainer !== null) {
          return this.previousContainer.visible = false;
        }
      },
      zoom: function(zoom) {
        var bounds, local;
        local = container.globalToLocal(stage.mouseX, stage.mouseY);
        container.regX = local.x;
        container.regY = local.y;
        container.x = stage.mouseX;
        container.y = stage.mouseY;
        bounds = stage.getBounds();
        if (bounds.width > tile_size || zoom > 1) {
          container.scaleX *= zoom;
        }
        if (bounds.height > tile_size || zoom > 1) {
          return container.scaleY *= zoom;
        }
      }
    };
    tileManager.addLayer();
    tileManager.addLayer(4);
    // tile.image.onload = () ->
    //     stage.update()
    stage.addEventListener('stagemousedown', function(e) {
      var offset;
      console.log(container.x / container.scaleX, container.y / container.scaleY);
      offset = {
        x: container.x - e.stageX,
        y: container.y - e.stageY
      };
      stage.addEventListener("stagemousemove", function(ev) {
        container.x = ev.stageX + offset.x;
        container.y = ev.stageY + offset.y;
        return stage.update();
      });
      return stage.addEventListener("stagemouseup", function() {
        return stage.removeAllEventListeners("stagemousemove");
      });
    });
    MouseWheelHandler = function(e) {
      var bounds, local, zoom;
      if (Math.max(-1, Math.min(1, e.wheelDelta || -e.detail)) > 0) {
        zoom = 1.1;
      } else {
        zoom = 1 / 1.1;
      }
      // local = stage.globalToLocal(stage.mouseX, stage.mouseY)
      local = container.globalToLocal(stage.mouseX, stage.mouseY);
      // stage.regX = local.x
      // stage.regY = local.y
      container.regX = local.x;
      container.regY = local.y;
      // stage.x=stage.mouseX
      // stage.y=stage.mouseY
      container.x = stage.mouseX;
      container.y = stage.mouseY;
      // stage.scaleX = stage.scaleY *= zoom
      bounds = stage.getBounds();
      if (bounds.width > tile_size || zoom > 1) {
        container.scaleX *= zoom;
      }
      if (bounds.height > tile_size || zoom > 1) {
        container.scaleY *= zoom;
      }
      return stage.update();
    };
    return canvas[0].addEventListener('wheel', MouseWheelHandler, false);
  });

}).call(this);
